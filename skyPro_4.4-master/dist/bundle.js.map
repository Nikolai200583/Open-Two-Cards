{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack://4.1/./src/gameDifficulty.ts","webpack://4.1/./src/util.ts","webpack://4.1/./src/renderItems.ts","webpack://4.1/./src/cards-array.ts","webpack://4.1/./src/gameScreen.ts","webpack://4.1/./src/index.ts"],"sourcesContent":["import { renderGameScreen } from './renderItems';\n\nexport function gameDifficulty(): void {\n    const buttons = document.querySelectorAll('.buttons');\n    const boxButtons = document.querySelector('.level__content') as HTMLElement;\n    const labelsButtons = document.querySelectorAll('.buttons-label');\n\n    boxButtons.addEventListener('click', (event) => {\n        setTimeout(() => {\n            const target = event.target as Element;\n            if (event.target === boxButtons) {\n                return;\n            }\n            target.classList.add('background');\n        }, 0);\n\n        labelsButtons.forEach((elements) => {\n            elements.classList.remove('background');\n        });\n\n        buttons.forEach((elements) => {\n            elements.classList.remove('background');\n        });\n    });\n}\nexport function gameStart(): void {\n    const buttons = document.querySelectorAll('.buttons');\n    for (const control of buttons) {\n        if ((control as HTMLInputElement).checked === true) {\n            window.application.levels = (control as HTMLInputElement).value;\n            switch (window.application.levels) {\n                case '1':\n                    renderGameScreen('body', 6);\n                    break;\n                case '2':\n                    renderGameScreen('body', 12);\n                    break;\n                case '3':\n                    renderGameScreen('body', 18);\n                    break;\n                default:\n                    break;\n            }\n        }\n    }\n}\n","import { renderScreenChoice } from './renderItems';\r\nimport { renderGameScreen } from './renderItems';\r\n\r\nexport function reloadGame(): void {\r\n    const app = document.querySelector('.app') as HTMLDivElement;\r\n    app.textContent = '';\r\n    renderScreenChoice();\r\n}\r\n\r\nexport function reloadSession(): void {\r\n    stop();\r\n    switch (window.application.levels) {\r\n        case '1':\r\n            renderGameScreen('body', 6);\r\n            break;\r\n        case '2':\r\n            renderGameScreen('body', 12);\r\n            break;\r\n        case '3':\r\n            renderGameScreen('body', 18);\r\n            break;\r\n        default:\r\n            break;\r\n    }\r\n}\r\n\r\n// export function timer(sec: number): void {\r\n//     let time = 0;\r\n//     const timerInterval = setInterval(function () {\r\n//         const minutes = Math.floor((time - Math.floor(time)) * 60)\r\n//             .toString()\r\n//             .padStart(2, '0');\r\n//         const seconds = (time % 60).toString().padStart(2, '0');\r\n//         window.application.result.push(`${minutes}:${seconds}`);\r\n//         time++;\r\n//     }, sec);\r\n//     window.application.timers.push(timerInterval);\r\n// }\r\n\r\n// export function stopTimer(): void {\r\n//     window.application.timers.forEach((timerInterval) => {\r\n//         clearInterval(timerInterval);\r\n//         window.application.timers = [];\r\n//     });\r\n// }\r\n\r\nexport function start() {\r\n    const startTime = new Date().getTime();\r\n    const run = () => {\r\n        const time = new Date().getTime() - startTime;\r\n        const timerHeading = document.querySelector(\r\n            '.timer__heading'\r\n        ) as HTMLElement;\r\n        timerHeading.textContent = (time / 1000).toFixed(2);\r\n        const timeoutId = window.setTimeout(run);\r\n        window.application.timers.push(timeoutId);\r\n        window.application.result.push(`${(time / 1000).toFixed(2)}`);\r\n    };\r\n    run();\r\n}\r\n\r\nexport function stop(): void {\r\n    window.application.timers.forEach((timeoutId) => {\r\n        clearInterval(timeoutId);\r\n        window.application.timers = [];\r\n    });\r\n}\r\n","import { gameDifficulty, gameStart } from './gameDifficulty';\r\nimport { getImage } from './cards-array';\r\nimport { reloadGame, reloadSession } from './util';\r\nimport { gameLogick } from './gameScreen';\r\n\r\nexport function renderBlockChoice(container: Element): void {\r\n    const buttonsName = ['1', '2', '3'];\r\n    buttonsName.forEach((elements) => {\r\n        const buttonsLevels = document.createElement('input');\r\n        buttonsLevels.setAttribute('type', 'radio');\r\n        buttonsLevels.setAttribute('value', elements);\r\n        buttonsLevels.setAttribute('id', elements);\r\n        buttonsLevels.setAttribute('name', 'group-buttons');\r\n        buttonsLevels.classList.add('buttons');\r\n        const buttonsLabel = document.createElement('label');\r\n        buttonsLabel.setAttribute('for', elements);\r\n        buttonsLabel.classList.add('buttons-label');\r\n        buttonsLabel.textContent = elements;\r\n        container.appendChild(buttonsLevels);\r\n        container.appendChild(buttonsLabel);\r\n        gameDifficulty();\r\n    });\r\n}\r\n\r\nexport function renderScreenChoice() {\r\n    const app = document.querySelector('.app') as Element;\r\n    const title = document.createElement('h1');\r\n    title.classList.add('title');\r\n    title.textContent = 'Выбери сложность';\r\n    const levelContent = document.createElement('div');\r\n    levelContent.classList.add('level__content');\r\n    app.appendChild(title);\r\n    app.appendChild(levelContent);\r\n    renderButtonStart(app, 'Старт', gameStart);\r\n\r\n    window.application.renderBlock('blockChoice', levelContent);\r\n}\r\n\r\nexport function renderGameScreen(container: string, numbers: number) {\r\n    const elementConst = document.querySelector(container) as HTMLElement;\r\n    elementConst.textContent = '';\r\n    const utilContainer = document.createElement('div');\r\n    utilContainer.classList.add('util__container');\r\n    const timerHeading = document.createElement('div');\r\n    timerHeading.classList.add('timer__heading');\r\n    const cardsContainer = document.createElement('div');\r\n    cardsContainer.classList.add('cards__container');\r\n    elementConst.appendChild(utilContainer);\r\n    utilContainer.appendChild(timerHeading);\r\n    elementConst.appendChild(cardsContainer);\r\n\r\n    renderButtonStart(utilContainer, 'Начать заново', reloadSession);\r\n\r\n    function shuffle(array: string[]): string[] {\r\n        let currentIndex = array.length,\r\n            randomIndex;\r\n        while (currentIndex !== 0) {\r\n            randomIndex = Math.floor(Math.random() * currentIndex);\r\n            currentIndex--;\r\n            [array[currentIndex], array[randomIndex]] = [\r\n                array[randomIndex],\r\n                array[currentIndex],\r\n            ];\r\n        }\r\n        return array;\r\n    }\r\n\r\n    const cardsArray = getImage(numbers);\r\n    const duplicateCardsArray = [...cardsArray, ...cardsArray];\r\n\r\n    shuffle(duplicateCardsArray);\r\n\r\n    duplicateCardsArray.forEach((element) => {\r\n        const cardsItem = document.createElement('div');\r\n        cardsItem.classList.add('cards', 'flip');\r\n\r\n        const notFlippedCardI = document.createElement('div');\r\n        const flippedCardI = document.createElement('div');\r\n\r\n        notFlippedCardI.classList.add('notflipped');\r\n        flippedCardI.classList.add(element, 'flipped');\r\n\r\n        notFlippedCardI.style.backgroundImage = 'url(./static/Maskgroup.png)';\r\n        flippedCardI.style.backgroundImage = `url(./static/img/${element}`;\r\n\r\n        cardsItem.append(flippedCardI, notFlippedCardI);\r\n        cardsContainer.appendChild(cardsItem);\r\n    });\r\n    gameLogick();\r\n}\r\n\r\nexport function renderScreenEndGame(titleGame: string, Image: string) {\r\n    const body = document.querySelector('body') as Element;\r\n    // body.textContent = '';\r\n    const backDiv = document.createElement('div');\r\n    backDiv.classList.add('backDiv');\r\n    const app = document.createElement('div');\r\n    app.classList.add('app');\r\n    const image = document.createElement('div');\r\n    image.classList.add('image__game');\r\n    image.style.backgroundImage = Image;\r\n    const title = document.createElement('h1');\r\n    title.classList.add('title');\r\n    title.textContent = titleGame;\r\n    const timer = document.createElement('div');\r\n    timer.classList.add('timer');\r\n    const min = window.application.result.pop();\r\n    timer.textContent = `${min}`;\r\n\r\n    body.appendChild(backDiv);\r\n    body.appendChild(app);\r\n    app.appendChild(image);\r\n    app.appendChild(title);\r\n    app.appendChild(timer);\r\n    renderButtonStart(app, 'Играть снова', reloadGame);\r\n}\r\n\r\nfunction renderButtonStart(\r\n    container: Element,\r\n    text: string,\r\n    callback: () => void\r\n) {\r\n    const buttonStart = document.createElement('button');\r\n    buttonStart.classList.add('buttonStart');\r\n    buttonStart.textContent = text;\r\n    container.appendChild(buttonStart);\r\n    buttonStart.addEventListener('click', callback);\r\n}\r\n","export function getImage(numbers: number): string[] {\n    let diffCards = [];\n    const rang = ['6', '7', '8', '9', '10', 'j', 'q', 'k', 't'];\n    const suit = ['b', 'c', 'k', 'p'];\n    for (let i = 0; i < numbers / 2; i++) {\n        const randomRang = Math.floor(Math.random() * rang.length);\n        const randomSuit = Math.floor(Math.random() * suit.length);\n        const randomCard = rang[randomRang] + suit[randomSuit] + '.png';\n        diffCards.push(randomCard);\n    }\n    return diffCards;\n}\n","import { renderScreenEndGame } from './renderItems';\nimport { start, stop } from './util';\n\nexport function gameLogick(): void {\n    let firstCard: any = null;\n    let secondCard: any = null;\n    let clickable: boolean = true;\n\n    const cards = document.querySelectorAll('.cards');\n\n    cards.forEach((card) => {\n        setTimeout(() => {\n            card.classList.remove('flip');\n\n            start();\n            cards.forEach((card, index) =>\n                card.addEventListener('click', () => {\n                    if (\n                        clickable === true &&\n                        !card.classList.contains('successfully')\n                    ) {\n                        card.classList.add('flip');\n\n                        if (firstCard === null) {\n                            firstCard = index;\n                        } else {\n                            if (index !== firstCard) {\n                                secondCard = index;\n                                clickable = false;\n                            }\n                        }\n\n                        if (\n                            firstCard !== null &&\n                            secondCard !== null &&\n                            firstCard !== secondCard\n                        ) {\n                            if (\n                                cards[firstCard].firstElementChild\n                                    ?.className ===\n                                cards[secondCard].firstElementChild?.className\n                            ) {\n                                setTimeout(() => {\n                                    firstCard = null;\n                                    secondCard = null;\n                                    clickable = true;\n                                }, 500);\n                            } else {\n                                setTimeout(() => {\n                                    cards[firstCard].classList.remove('flip');\n                                    cards[secondCard].classList.remove('flip');\n\n                                    firstCard = null;\n                                    secondCard = null;\n                                    clickable = true;\n                                    renderScreenEndGame(\n                                        'Вы проиграли',\n                                        'url(../static/img/lose.png)'\n                                    );\n                                    stop();\n                                }, 500);\n                            }\n                        }\n\n                        if (\n                            Array.from(cards).every((card) =>\n                                card.className.includes('flip')\n                            )\n                        ) {\n                            renderScreenEndGame(\n                                'Вы выиграли',\n                                'url(../static/img/image.png)'\n                            );\n                            stop();\n                        }\n                    }\n                })\n            );\n        }, 1000);\n    });\n}\n","import './css/style.css';\nimport { renderScreenChoice, renderBlockChoice } from './renderItems';\n\ndeclare global {\n    interface Window {\n        application: {\n            blocks: { [key: string]: (container: HTMLElement) => void };\n            screens: { [key: string]: (container?: HTMLElement) => void };\n            renderScreen: (screenName: string) => void;\n            renderBlock: (blockName: string, container: HTMLElement) => void;\n            levels: string | [];\n            timers: number [];\n            result: string[];\n        };\n    }\n}\nwindow.application = {\n    blocks: {},\n    screens: {},\n    renderScreen: function (screenName: string) {\n        this.screens[screenName]();\n    },\n    renderBlock: function (blockName, container) {\n        this.blocks[blockName](container);\n    },\n    levels: [],\n    timers: [],\n    result: [],\n};\n\nwindow.application.blocks['blockChoice'] = renderBlockChoice;\nwindow.application.screens['screenChoice'] = renderScreenChoice;\nwindow.application.renderScreen('screenChoice');\n\n"],"names":["gameStart","buttons","document","querySelectorAll","control","checked","window","application","levels","value","renderGameScreen","reloadGame","querySelector","textContent","renderScreenChoice","reloadSession","stop","timers","forEach","timeoutId","clearInterval","app","title","createElement","classList","add","levelContent","appendChild","renderButtonStart","renderBlock","container","numbers","elementConst","utilContainer","timerHeading","cardsContainer","cardsArray","diffCards","rang","suit","i","randomRang","Math","floor","random","length","randomSuit","randomCard","push","getImage","duplicateCardsArray","array","randomIndex","currentIndex","shuffle","element","cardsItem","notFlippedCardI","flippedCardI","style","backgroundImage","append","firstCard","secondCard","clickable","cards","card","setTimeout","remove","startTime","Date","getTime","run","time","toFixed","result","start","index","addEventListener","contains","firstElementChild","className","renderScreenEndGame","Array","from","every","includes","gameLogick","titleGame","Image","body","backDiv","image","timer","min","pop","text","callback","buttonStart","blocks","screens","renderScreen","screenName","this","blockName","elements","buttonsLevels","setAttribute","buttonsLabel","boxButtons","labelsButtons","event","target","gameDifficulty"],"sourceRoot":""}